import chalk from "chalk";
import webpack from "webpack";
import WebpackDevServer, { Configuration } from "webpack-dev-server";
import configFactory from "../config/webpack.config";
import { choosePort } from "../utils";

process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

const PORT = process.env.PORT || "3000";
const DEFAULT_PORT = parseInt(PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

function start(port: number) {
  const config = configFactory("development");
  const compiler = webpack(config);

  // Serve webpack assets generated by the compiler over a web server.
  const serverConfig: Configuration = {
    host: HOST,
    port,
    devMiddleware: {
      writeToDisk: true,
    },
    allowedHosts: "auto",
  };
  const devServer = new WebpackDevServer(serverConfig, compiler);

  // Launch WebpackDevServer.
  devServer.startCallback(() => {
    console.log(chalk.cyan("Starting the development server...\n"));
  });

  ["SIGINT", "SIGTERM"].forEach(function (sig) {
    process.on(sig, function () {
      devServer.stop();
      process.exit();
    });
  });

  if (process.env.CI !== "true") {
    // Gracefully exit when stdin ends
    process.stdin.on("end", function () {
      devServer.stop();
      process.exit();
    });
  }
}

function bootstrap() {
  return choosePort(HOST, DEFAULT_PORT)
    .then((port: number | null) => {
      if (port == null) {
        console.log(chalk.yellow("We have not found a port."));
        return;
      }

      return start(port);
    })
    .catch((err: unknown) => {
      if (err && typeof err === "object" && "message" in err) {
        console.log(err.message);
      }
      process.exit(1);
    });
}

bootstrap();
